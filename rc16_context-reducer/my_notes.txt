==========================
CONTEXT- REDUCER
==========================

CONTEXT:
glabal alan:
token
langaage
theme
vs..

-paylasim yapmak istediigmiz yerleri context ile sarmallama yapiyoruz.
cantext API reactta varolandir, kuruluma geek yoktur.

- REDUX: 3rd kutuphane kurulum gerekir. contextin yetersiz kalmasi durumunda genelde redux kullaniliyor.

- global state ler cogalinca yonetimi contex ile zorlasiyor. 
10-15 glabla state varsa redux tercih edilmeli.


-neden kullanilmali?
proplarin dagilimi bazen zorlasiyor
language gibi token gibi kulalnimlarda contexlerin kullanimi daha kolay olur

- glabalstate in dezavantaji
1-bir componenti glabal state bagmli yaptimgimiz zaman o component glabal state bagimli oalcak , dolayisiyla o componenti alip baska yerlerde kullanamayiz.
yani yeniden kullanilablirlik acisindan bakildiginda prop mantigi daha iyi 
reactin temel felsefesi yeniden kullanilabliri componentlere dayanir

2- or : theme nin rengi darka gecti buna bagli olarak butun bu statei kulalnan herkese yeniden render gelir
globalstateleri dikkatli kullanilmazsa eksesif render a sebep olur 

interview:
1- localstate-globalstate kavramlari nedir?
2- globalstate nasil yonetilir?
context ve ya redux ile
3- prop drilling nedir ? nasil cozulur?
prop drilling: proplarin elden ele uzatilmasidir(minibus ornegi)
cozumu : global state kullanmaktir.
context API ve REDUX gibi


-------------------------------

CONTEXT olusturma:

1- create, oluÅŸtur createContext
2- provider, sarmala  , VALUE probu ile gonderecegin veriyi yaz
3- consume (use), kullan useContext


------------------

useState --> dahili
useEffect --> dahili
useNavigate --> router-dom
useLocation --> router-dom
useContext --> dahili 

----------------------------

GENELDE  context adinda (components dosyasi ile ayni hizada ) bir dosya olusturulur, ve contexler burada yazili
















